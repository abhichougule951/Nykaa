import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faHeart } from '@fortawesome/free-solid-svg-icons';
import Swal from 'sweetalert2';
import Navigation from '../Navigation';
import DarkVariantExample from './Carousels';

const ProductCard = ({ product, addToCart }) => {
  const [quantity, setQuantity] = useState(1);

  const handleAddToCart = () => {
    addToCart({
      id: product.id,
      name: product.name,
      imageUrl: product.imageUrl,
      price: product.price,
      quantity: quantity,
    });
  };

  return (
    <div className="card">
      <img src={product.imageUrl} className="card-img-top" alt="Product" style={{ maxHeight: '34vh', marginBottom: '0' }} />
      <div className="card-body" style={{ maxHeight: '34vh', marginTop: '0' }}>
        <h6 className="fw-bolder" style={{ fontSize: '13px', marginBottom: '0' }}>{product.name}</h6>
        <h6 className="fw-bolder" style={{ fontSize: '10px', marginBottom: '1px' }}>Price: {product.price}</h6>
        <div className="form-group">
          <label className="fw-bolder" htmlFor="quantity" style={{ fontSize: '10px', marginBottom: '1px' }}>Quantity:</label>
          <input
            type="number"
            style={{ padding: '1px' }}
            className="form-control"
            id="quantity"
            value={quantity}
            onChange={(e) => setQuantity(parseInt(e.target.value))}
          />
        </div>
        <button className="btn btn-primary" style={{ fontSize: '10px', backgroundColor: '#f160c3',fontFamily:'serif' }} onClick={handleAddToCart}>
          Add to Cart
        </button>
        <button className="btn btn-light" style={{ fontSize: '10px', marginLeft: '20px', backgroundColor: 'white' }} >
          <FontAwesomeIcon icon={faHeart} style={{ color: 'red' }} />
        </button>
      </div>
    </div>
  );
};






export const CartDisplay = ({ cartItems, onQuantityChange, onBuyNowClick }) => {
  const [totalPrice, setTotalPrice] = useState(0);
  const [discountApplied, setDiscountApplied] = useState(false);

  const updateTotalPrice = () => {
   
    if (cartItems && cartItems.length > 0) {
      const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
      setTotalPrice(total);
    } else {
      
      setTotalPrice(0);
    }
  };

  useEffect(() => {
    if (totalPrice > 5000 && !discountApplied) {
      showDiscountAlert();
      setDiscountApplied(true);
    }
  }, [totalPrice, discountApplied]);

  const showDiscountAlert = () => {
    Swal.fire({
      title: 'Congratulations!',
      text: 'You got a ₹200 discount. Total price reduced!',
      icon: 'success',
      confirmButtonText: 'Ok',
    }).then(() => {
      const discountedTotalPrice = totalPrice - 200;
      setTotalPrice(discountedTotalPrice);
    });
  };

  const handleQuantityChange = (productId, newQuantity) => {
    onQuantityChange(productId, newQuantity);
    updateTotalPrice();
  };

  useEffect(() => {
    updateTotalPrice();
  }, [cartItems]);

  return (
    <div className="bg-white p-4 rounded shadow-md">
      <h2 className="text-xl font-bold mb-4">Shopping Cart</h2>
      <ul className="list-group">
      {cartItems && cartItems.map((item) => (
          <li key={item.id} className="list-group-item flex justify-between items-center bg-gray-100 mb-2 p-3 rounded">
            <div className="flex items-center">
              <img src={item.imageUrl} alt={item.name} className="w-12 h-12 object-cover rounded mr-4" />
              <div>
                <p className="text-lg font-semibold">{item.name}</p>
                <p className="text-sm text-gray-500">₹{item.price} each</p>
              </div>
            </div>
            <div className="flex items-center">
              <button
                className="btn btn-sm btn-outline-primary mx-2"
                onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
              >
                -
              </button>
              <span className="text-lg mx-2">{item.quantity}</span>
              <button
                className="btn btn-sm btn-outline-primary mx-2"
                onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
              >
                +
              </button>
            </div>
            <span className="text-lg font-semibold">₹{item.price * item.quantity}</span>
          </li>
        ))}
      </ul>
      <div className="mt-4">
        <p className="text-lg font-semibold">Total Price: ₹{totalPrice}</p>
      </div>
      <div className="mt-4">
        <button className="btn btn-primary px-6 py-2" onClick={onBuyNowClick}>
          Buy Now
        </button>
      </div>
    </div>
  );
};




const Card = () => {
  const [products, setProducts] = useState([]);
  
  const [cartItems, setCartItems] = useState([]);

  const [searchTerm, setSearchTerm] = useState('');


  useEffect(() => {
    axios.get('http://localhost:8080/api/products')
      .then(response => setProducts(response.data))
      .catch(error => console.error('Error fetching product data:', error));
    
   
    // const storedCartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
    // setCartItems(storedCartItems);
  }, []);

  const handleSearch = (searchTerm) => {
    if (searchTerm.trim() !== '') {
      axios.get(`http://localhost:8080/api/products/searchByTerm?searchTerm=${searchTerm}`)
        .then(response => {
          console.log('Search Results:', response.data);
          setProducts(response.data);
        })
        .catch(error => console.error('Error fetching search results:', error));
    }
  };
  const handleQuantityChange = (productId, newQuantity) => {
   
    setCartItems(prevCartItems => prevCartItems.map(item => 
      (item.id === productId ? { ...item, quantity: newQuantity } : item)
    ));
  };

  const addToCart = (product) => {
    const updatedCart = [...cartItems, product];
    setCartItems(updatedCart);
    
    localStorage.setItem('cartItems', JSON.stringify(updatedCart));
    
  };
  

  return (
    <div className="container">

      <Navigation onSearch={handleSearch} />
      <DarkVariantExample/>
      <div className="row">
        {products.map((product) => (
          <div key={product.id} className="col-md-3 mb-3">
            <ProductCard product={product} addToCart={addToCart} />
          </div>
        ))}
      </div>
      <CartDisplay cartItems={cartItems} onQuantityChange={handleQuantityChange}/>
    </div>
  );
};

export default Card;





/*
  This example requires some changes to your config:
  
  ```
  // tailwind.config.js
  module.exports = {
    // ...
    plugins: [
      // ...
      require('@tailwindcss/aspect-ratio'),
    ],
  }
  ```
*/
import { Fragment, useState } from 'react'
import { Dialog, Popover, Tab, Transition } from '@headlessui/react'
import { Bars3Icon, MagnifyingGlassIcon, ShoppingBagIcon, XMarkIcon } from '@heroicons/react/24/outline'
import Card from './homesectioncard/Card'



const navigation = {
  categories: [
    {
      id: 'women',
      name: 'Women',
      featured: [
        {
          name: 'Makeup',
          href: '#',
          imageSrc: 'https://images-static.nykaa.com/creatives/e57aab6a-7727-4784-b3dc-c7c92de92bf2/default.jpg?tr=w-1200,cm-pad_resize',
          imageAlt: 'Makeup Advertisement',
        },
        {
          name: 'Winter Shop',
          href: '#',
          imageSrc: 'https://images-static.nykaa.com/creatives/43c370f7-2459-476f-be57-7edc63ebb1d0/default.jpg?tr=w-1200,cm-pad_resize',
          imageAlt: 'Makeup Advertisement',
        },
      ],
      sections: [
        {
          id: 'Makeup',
          name: 'Makeup',
          items: [
            { name: 'Face', href: '#' },
            { name: 'Eyes', href: '#' },
            { name: 'Lips', href: '#' },
           
          ],
        },
        {
          id: 'Appliances',
          name: 'Appliances',
          items: [
            { name: 'Hair Styling Tools', href: '#' },
        
            { name: 'Face tools', href: '#' },
           
          ],
        },
        {
          id: 'Skin',
          name: 'Skin',
          items: [
            { name: 'Moisturizers', href: '#' },
            { name: 'Cleansers', href: '#' },
            { name: 'Masks', href: '#' },
          
          ],
        },
      ],
    },
    {
      id: 'men',
      name: 'Men',
      featured: [
        {
          name: 'TOP BRANDS',
          href: '#',
          imageSrc: 'https://images-static.nykaa.com/creatives/45bfb874-5b7d-4461-a5ba-8fb5c6358b50/default.jpg?tr=w-1200,cm-pad_resize',
          imageAlt: 'Men Advertisement',
        },
        {
          name: 'Budget Buy',
          href: '#',
          imageSrc: 'https://images-static.nykaa.com/uploads/fa3c252a-c271-46b2-8211-a8be518adc5d.jpg?tr=w-480,cm-pad_resize',
          imageAlt:'Men Advertisement.',
        },
      ],
      sections: [
        {
          id: 'clothing',
          name: 'Clothing',
          items: [
            { name: 'Skin Care', href: '#' },
           
           
            { name: 'Perfumes and Body Sprays', href: '#' },
            { name: 'Hair Care', href: '#' },
            { name: 'Bath and Body', href: '#' },
           
            { name: 'Beard Care', href: '#' },
          ],
        },
        
        {
          id: 'brands',
          name: 'Brands',
          items: [
            { name: 'USTARA', href: '#' },
            { name: 'Park Avenue', href: '#' },
            { name: 'Neutrogena', href: '#' },
            { name: 'Traya', href: '#' },
          ],
        },
      ],
    },
  ],
  pages: [
    { name: 'Company', href: '#' },
    { name: 'Stores', href: '#' },
  ],
}

function classNames(...classes) {
  return classes.filter(Boolean).join(' ')
}

export default function Navigation({onSearch}) {
  const [open, setOpen] = useState(false)
  const [searchOpen, setSearchOpen] = useState(false); 
  const [searchTerm, setSearchTerm] = useState('');
  const [cartOpen, setCartOpen] = useState(false);

  const openSearch = () => {
    setSearchOpen(true);
  };

  const closeSearch = () => {
    setSearchOpen(false);
  };

  const handleSearch = () => {
    onSearch(searchTerm);
   
   setSearchOpen(false)

  };
  const toggleCart = () => {
    setCartOpen(!cartOpen);
  };
  const renderCart = () => {
    // Add your logic to render the cart component here
    return (
      <div className="fixed inset-0 z-50 overflow-hidden">
       
      </div>
    );
  };

  return (
    <div className="bg-white">
      
      
      <Transition.Root show={open} as={Fragment}>
        <Dialog as="div" className="relative z-40 lg:hidden" onClose={setOpen}>
          <Transition.Child
            as={Fragment}
            enter="transition-opacity ease-linear duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="transition-opacity ease-linear duration-300"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-black bg-opacity-25" />
          </Transition.Child>

          <div className="fixed inset-0 z-40 flex">
            <Transition.Child
              as={Fragment}
              enter="transition ease-in-out duration-300 transform"
              enterFrom="-translate-x-full"
              enterTo="translate-x-0"
              leave="transition ease-in-out duration-300 transform"
              leaveFrom="translate-x-0"
              leaveTo="-translate-x-full"
            >
              <Dialog.Panel className="relative flex w-full max-w-xs flex-col overflow-y-auto bg-white pb-12 shadow-xl">
                <div className="flex px-4 pb-2 pt-5">
                  <button
                    type="button"
                    className="relative -m-2 inline-flex items-center justify-center rounded-md p-2 text-gray-400"
                    onClick={() => setOpen(false)}
                  >
                    <span className="absolute -inset-0.5" />
                    <span className="sr-only">Close menu</span>
                    <XMarkIcon className="h-6 w-6" aria-hidden="true" />
                  </button>
                </div>

                {/* Links */}
                <Tab.Group as="div" className="mt-2">
                  <div className="border-b border-gray-200">
                    <Tab.List className="-mb-px flex space-x-8 px-4">
                      {navigation.categories.map((category) => (
                        <Tab
                          key={category.name}
                          className={({ selected }) =>
                            classNames(
                              selected ? 'border-indigo-600 text-indigo-600' : 'border-transparent text-gray-900',
                              'flex-1 whitespace-nowrap border-b-2 px-1 py-4 text-base font-medium'
                            )
                          }
                        >
                          {category.name}
                        </Tab>
                      ))}
                    </Tab.List>
                  </div>
                  <Tab.Panels as={Fragment}>
                    {navigation.categories.map((category) => (
                      <Tab.Panel key={category.name} className="space-y-10 px-4 pb-8 pt-10">
                        <div className="grid grid-cols-2 gap-x-4">
                          {category.featured.map((item) => (
                            <div key={item.name} className="group relative text-sm">
                              <div className="aspect-h-1 aspect-w-1 overflow-hidden rounded-lg bg-gray-100 group-hover:opacity-75">
                                <img src={item.imageSrc} alt={item.imageAlt} className="object-cover object-center" />
                              </div>
                              <a href={item.href} className="mt-6 block font-medium text-gray-900">
                                <span className="absolute inset-0 z-10" aria-hidden="true" />
                                {item.name}
                              </a>
                              <p aria-hidden="true" className="mt-1">
                                Shop now
                              </p>
                            </div>
                          ))}
                        </div>
                        {category.sections.map((section) => (
                          <div key={section.name}>
                            <p id={`${category.id}-${section.id}-heading-mobile`} className="font-medium text-gray-900">
                              {section.name}
                            </p>
                            <ul
                              role="list"
                              aria-labelledby={`${category.id}-${section.id}-heading-mobile`}
                              className="mt-6 flex flex-col space-y-6"
                            >
                              {section.items.map((item) => (
                                <li key={item.name} className="flow-root">
                                  <a href={item.href} className="-m-2 block p-2 text-gray-500">
                                    {item.name}
                                  </a>
                                </li>
                              ))}
                            </ul>
                          </div>
                        ))}
                      </Tab.Panel>
                    ))}
                  </Tab.Panels>
                </Tab.Group>

                <div className="space-y-6 border-t border-gray-200 px-4 py-6">
                  {navigation.pages.map((page) => (
                    <div key={page.name} className="flow-root">
                      <a href={page.href} className="-m-2 block p-2 font-medium text-gray-900">
                        {page.name}
                      </a>
                    </div>
                  ))}
                </div>

                {/* <div className="space-y-6 border-t border-gray-200 px-4 py-6">
                  <div className="flow-root">
                    <a href="#" className="-m-2 block p-2 font-medium text-gray-900">
                      Sign in
                    </a>
                  </div>
                  <div className="flow-root">
                    <a href="#" className="-m-2 block p-2 font-medium text-gray-900">
                      Create account
                    </a>
                  </div>
                </div> */}

                {/* <div className="border-t border-gray-200 px-4 py-6">
                  <a href="#" className="-m-2 flex items-center p-2">
                    <img
                      src="https://tailwindui.com/img/flags/flag-india.svg"
                      alt=""
                      className="block h-auto w-5 flex-shrink-0"
                    />
                    <span className="ml-3 block text-base font-medium text-gray-900">India</span>
                    <span className="sr-only">, change currency</span>
                  </a>
                </div> */}
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </Dialog>
      </Transition.Root>

      <header className="relative bg-white">
        <p className="flex h-10 items-center justify-center bg-pink-500 px-4 text-sm font-medium text-white sm:px-6 lg:px-8">
          Nykaa
        </p>

        <nav aria-label="Top" className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="border-b border-gray-200">
            <div className="flex h-16 items-center">
              <button
                type="button"
                className="relative rounded-md bg-white p-2 text-gray-400 lg:hidden"
                onClick={() => setOpen(true)}
              >
                <span className="absolute -inset-0.5" />
                <span className="sr-only">Open menu</span>
                <Bars3Icon className="h-6 w-6" aria-hidden="true" />
              </button>

            
              <div className="ml-4 flex lg:ml-0">
                <a href="#">
                  <span className="sr-only">Your Company</span>
                  <img
                    className="h-1 w-auto"
                    src="https://cdn.iconscout.com/icon/free/png-512/free-nykaa-3384872-2822953.png?f=webp&w=512"
                    alt=""
                  />
                </a>
              </div>

              {/* Flyout menus */}
              <Popover.Group className="hidden lg:ml-8 lg:block lg:self-stretch">
                <div className="flex h-full space-x-8">
                  {navigation.categories.map((category) => (
                    <Popover key={category.name} className="flex">
                      {({ open }) => (
                        <>
                          <div className="relative flex">
                            <Popover.Button
                              className={classNames(
                                open
                                  ? 'border-indigo-600 text-indigo-600'
                                  : 'border-transparent text-gray-700 hover:text-gray-800',
                                'relative z-10 -mb-px flex items-center border-b-2 pt-px text-sm font-medium transition-colors duration-200 ease-out'
                              )}
                            >
                              {category.name}
                            </Popover.Button>
                          </div>

                          <Transition
                            as={Fragment}
                            enter="transition ease-out duration-200"
                            enterFrom="opacity-0"
                            enterTo="opacity-100"
                            leave="transition ease-in duration-150"
                            leaveFrom="opacity-100"
                            leaveTo="opacity-0"
                          >
                            <Popover.Panel className="absolute inset-x-0 top-full text-sm text-gray-500">
                             
                              <div className="absolute inset-0 top-1/2 bg-white shadow" aria-hidden="true" />

                              <div className="relative bg-white">
                                <div className="mx-auto max-w-7xl px-8">
                                  <div className="grid grid-cols-2 gap-x-8 gap-y-10 py-16">
                                    <div className="col-start-2 grid grid-cols-2 gap-x-8">
                                      {category.featured.map((item) => (
                                        <div key={item.name} className="group relative text-base sm:text-sm">
                                          <div className="aspect-h-1 aspect-w-1 overflow-hidden rounded-lg bg-gray-100 group-hover:opacity-75">
                                            <img
                                              src={item.imageSrc}
                                              alt={item.imageAlt}
                                              className="object-cover object-center"
                                            />
                                          </div>
                                          <a href={item.href} className="mt-6 block font-medium text-gray-900">
                                            <span className="absolute inset-0 z-10" aria-hidden="true" />
                                            {item.name}
                                          </a>
                                          <p aria-hidden="true" className="mt-1">
                                            Shop now
                                          </p>
                                        </div>
                                      ))}
                                    </div>
                                    <div className="row-start-1 grid grid-cols-3 gap-x-8 gap-y-10 text-sm">
                                      {category.sections.map((section) => (
                                        <div key={section.name}>
                                          <p id={`${section.name}-heading`} className="font-medium text-gray-900">
                                            {section.name}
                                          </p>
                                          <ul
                                            role="list"
                                            aria-labelledby={`${section.name}-heading`}
                                            className="mt-6 space-y-6 sm:mt-4 sm:space-y-4"
                                          >
                                            {section.items.map((item) => (
                                              <li key={item.name} className="flex">
                                                <a href={item.href} className="hover:text-gray-800">
                                                  {item.name}
                                                </a>
                                              </li>
                                            ))}
                                          </ul>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </Popover.Panel>
                          </Transition>
                        </>
                      )}
                    </Popover>
                  ))}

                  {navigation.pages.map((page) => (
                    <a
                      key={page.name}
                      href={page.href}
                      className="flex items-center text-sm font-medium text-gray-700 hover:text-gray-800"
                    >
                      {page.name}
                    </a>
                  ))}
                </div>
              </Popover.Group>

              <div className="ml-auto flex items-center">
                <div className="hidden lg:flex lg:flex-1 lg:items-center lg:justify-end lg:space-x-6">
                  <a href="#" className="text-sm font-medium text-gray-700 hover:text-gray-800">
                    Sign in
                  </a>
                  <span className="h-6 w-px bg-gray-200" aria-hidden="true" />
                  <a href="#" className="text-sm font-medium text-gray-700 hover:text-gray-800">
                    Create account
                  </a>
                </div>

                <div className="hidden lg:ml-8 lg:flex">
                  <a href="#" className="flex items-center text-gray-700 hover:text-gray-800">
                    <img
                      src="https://tailwindui.com/img/flags/flag-canada.svg"
                      alt=""
                      className="block h-auto w-5 flex-shrink-0"
                    />
                    <span className="ml-3 block text-sm font-medium">India</span>
                    <span className="sr-only">, change currency</span>
                  </a>
                </div>

                {/* Search */}
                <div className="bg-white">
      {/* ... */}

      <header className="relative bg-white">
        {/* ... */}

        {/* Search */}
        <div className="flex lg:ml-6">
          <button
            onClick={openSearch}
            className="p-2 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring focus:border-blue-300"
          ><span className="sr-only">Search</span>
            
            <MagnifyingGlassIcon className="h-6 w-6" aria-hidden="true" />
          </button>
        </div>

        {/* Search Bar */}
        <Transition.Root show={searchOpen} as={Fragment}>
          <Dialog as="div" className="fixed inset-0 z-50 overflow-hidden" onClose={closeSearch}>
            <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
              {/* Background overlay */}
              <Transition.Child
                as={Fragment}
                enter="ease-in-out duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="ease-in-out duration-300"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <Dialog.Overlay className="fixed inset-0 bg-black bg-opacity-25" />
              </Transition.Child>

              {/* Search Bar Content */}
              <Transition.Child
                as={Fragment}
                enter="ease-in-out duration-300"
                enterFrom="opacity-0 scale-95"
                enterTo="opacity-100 scale-100"
                leave="ease-in-out duration-300"
                leaveFrom="opacity-100 scale-100"
                leaveTo="opacity-0 scale-95"
              >
                <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                  {/* Search Bar Content Goes Here */}
                  <div className="p-6">
                    <form>
                      <label htmlFor="search" className="sr-only">
                        Search
                      </label>
                      <input
                        type="text"
                        id="search"
                        name="search"
                        className="block w-full border-gray-300 rounded-md p-2"
                        placeholder="Search..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                      <div className="flex lg:ml-6">
                      <button
                       onClick={(e) => {
                        e.preventDefault(); // Prevent the default form submission behavior
                        handleSearch();
                       }}
                       className="btn btn-primary"
                       style={{ fontSize: '10px', backgroundColor: '#f160c3', fontFamily: 'serif' }}
                      >
                      Search
                     </button>
                      </div>
                    </form>
                  </div>
                </div>
              </Transition.Child>
            </div>
          </Dialog>
        </Transition.Root>
      </header>
    </div>

                {/* Cart */}
                <div className="ml-4 flow-root lg:ml-6">
                
        <a href="#" className="group -m-2 flex items-center p-2" onClick={toggleCart}>
          <ShoppingBagIcon
            className="h-6 w-6 flex-shrink-0 text-gray-400 group-hover:text-gray-500"
            aria-hidden="true"
          />
          <span className="ml-2 text-sm font-medium text-gray-700 group-hover:text-gray-800">0</span>
          <span className="sr-only">items in cart, view bag</span>
        </a>
      </div>
      {cartOpen && renderCart()}
              </div>
            </div>
          </div>
        </nav>
      </header>
    </div>
  )
}
